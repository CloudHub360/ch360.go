// Code generated by mockery v1.0.0
package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import types "github.com/CloudHub360/ch360.go/ch360/types"

// DocumentCreatorDeleterClassifier is an autogenerated mock type for the DocumentCreatorDeleterClassifier type
type DocumentCreatorDeleterClassifier struct {
	mock.Mock
}

// ClassifyDocument provides a mock function with given fields: ctx, documentId, classifierName
func (_m *DocumentCreatorDeleterClassifier) ClassifyDocument(ctx context.Context, documentId string, classifierName string) (*types.ClassificationResult, error) {
	ret := _m.Called(ctx, documentId, classifierName)

	var r0 *types.ClassificationResult
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *types.ClassificationResult); ok {
		r0 = rf(ctx, documentId, classifierName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ClassificationResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, documentId, classifierName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDocument provides a mock function with given fields: ctx, fileContents
func (_m *DocumentCreatorDeleterClassifier) CreateDocument(ctx context.Context, fileContents []byte) (string, error) {
	ret := _m.Called(ctx, fileContents)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, []byte) string); ok {
		r0 = rf(ctx, fileContents)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, fileContents)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDocument provides a mock function with given fields: ctx, documentId
func (_m *DocumentCreatorDeleterClassifier) DeleteDocument(ctx context.Context, documentId string) error {
	ret := _m.Called(ctx, documentId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, documentId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
