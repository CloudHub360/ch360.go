// Code generated by mockery v1.0.0
package mocks

import io "io"
import mock "github.com/stretchr/testify/mock"
import types "github.com/CloudHub360/ch360.go/ch360/types"

// ClassifyResultsFormatter is an autogenerated mock type for the ClassifyResultsFormatter type
type ClassifyResultsFormatter struct {
	mock.Mock
}

// WriteFooter provides a mock function with given fields: writer
func (_m *ClassifyResultsFormatter) WriteFooter(writer io.Writer) error {
	ret := _m.Called(writer)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer) error); ok {
		r0 = rf(writer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteHeader provides a mock function with given fields: writer
func (_m *ClassifyResultsFormatter) WriteHeader(writer io.Writer) error {
	ret := _m.Called(writer)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer) error); ok {
		r0 = rf(writer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteResult provides a mock function with given fields: writer, filename, result
func (_m *ClassifyResultsFormatter) WriteResult(writer io.Writer, filename string, result *types.ClassificationResult) error {
	ret := _m.Called(writer, filename, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer, string, *types.ClassificationResult) error); ok {
		r0 = rf(writer, filename, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteSeparator provides a mock function with given fields: writer
func (_m *ClassifyResultsFormatter) WriteSeparator(writer io.Writer) error {
	ret := _m.Called(writer)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer) error); ok {
		r0 = rf(writer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
